#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: HOLLY CHEN z5359932
Written on: 5/04/2023

My Pokemon

Create your very own Pokemon
"""


import sys
import psycopg2
import helpers
from random import Random


### Constants
USAGE = f"Usage: {sys.argv[0]} <Seed>"


### Globals
db = None
Seed = None
rng = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
Seed = int(sys.argv[1]) # read the seed from the command line
rng  = Random(Seed)     # set the seed for the python random number generator

random_qry = '''
select setseed(%s)
'''

game_qry = '''
select * from games
order by random()
limit 10
'''

pokemon_qry = '''
select p.* from pokemon p
join pokedex d on (p.id = d.national_id)
join games g on (d.game = g.id)
where (g.id = %s)
order by random()
limit 10
'''

pokedex_qry = '''
select (d.national_id).pokedex_number, d.regional_id 
from pokedex d
join games g on (g.id = d.game)
join pokemon p on (p.id = d.national_id)
where (p.id = %s::_pokemon_id)
and (g.id = %s)
'''

ability_qry = '''
select a.* from abilities a
join knowable_abilities k on (k.knows = a.id)
join pokemon p on (p.id = k.known_by)
where (p.id = %s::_pokemon_id)
order by a.id
'''

move_qry = '''
select distinct m.* from moves m
join learnable_moves l on (l.learns = m.id)
join requirements r on (l.learnt_when = r.id)
where (r.assertion ~ 'Level:')
and (l.learnt_by = %s::_pokemon_id)
and (l.learnt_in = %s)
order by m.id
'''

pftype_qry = '''
select t.name from types t
join pokemon p on (p.first_type = t.id) 
where (p.name = %s)
'''

pstype_qry = '''
select t.name from types t
join pokemon p on (p.second_type = t.id) 
where (p.name = %s)
'''

mtype_qry = '''
select t.name from types t 
join moves m on (t.id = m.of_type)
where (m.of_type = %s)
order by t.name
'''

# `rng` is a python Random number generator
# `rng.random()` returns a random float between 0 and 1
# `rng.randint(a, b)` returns a random integer between a and b (inclusive)

# `SELECT setseed(seed);` sets the postgres random seed to `seed`
# `SELECT * FROM Table ORDER BY random() LIMIT 5;` gives 5 random rows from the table `Table`
# `SELECT setseed(seed);` should be used once, before any calls to random(), with the a random number generated by `rng.random()`

def menu(items: list[str]) -> int:
	"""
	Given a list of strings,
	print a numbered menu
	and return the user's selection.
	"""
	padding = len(str(len(items)))
	print(f"Select an option from the menu below by entering its number:")
	for i, item in enumerate(items):
		print(f"{i+1:{padding}}) {item}")
	ret = int(input("> Selection: ")) - 1
	if not sys.stdin.isatty():
		print(f"{ret+1}")
	print()
	return ret
    
def listnames(items: list[str]) -> list[str]:
	names = []
	for item in items:
		names.append(item[1])
	return names;
	
def printpokemon(game, pokemon, pokedex, ability, moves_list):
	print(f"Here is your new Pokemon (from Pokemon {game[1]}):")
	print()
	print(f"Name: {pokemon[1]}")
	print(f"Species: {pokemon[2]}")
	cur = db.cursor()
	cur.execute(pftype_qry, [pokemon[1]])
	f_type = cur.fetchone()
	cur.execute(pstype_qry, [pokemon[1]])
	s_type = cur.fetchone()
	ptype = []
	if (f_type is not None): 
		ptype.append(f_type)
	if (s_type is not None):
		ptype.append(s_type)
	print(f"Type: {ptype[0][0]}", end="")
	if (pokemon[4] != None):
		print(f" + {ptype[1][0]}")
	else:
		print()	
	print(f"Pokedex Number: {pokedex[1]} ({pokedex[0]})")
	print()
	if (ability == 0):
		print("Ability: None")
	else:
		print(f"Ability: {ability[1]}")
	print()
	print("Moves:")
	for move in moves_list:
		cur.execute(mtype_qry, [move[3]])
		typ = cur.fetchone()
		print(f"	{move[1]}	[{typ[0]}]	(Category: {move[4]}, Power: {move[5]}, Accuracy: {move[6]})")
	print()
    
def main():
	cur = db.cursor()
	cur.execute(random_qry, [rng.random()])
	cur.execute(game_qry)
	games = cur.fetchmany(10)
	g_names = listnames(games)
	game = games[menu(g_names)]
	cur.execute(pokemon_qry, [game[0]])
	pokemons = cur.fetchmany(10)
	p_names = listnames(pokemons)
	pokemon = pokemons[menu(p_names)]
	cur.execute(pokedex_qry, [pokemon[0], game[0]])
	pokedex = cur.fetchone()
	cur.execute(ability_qry, [pokemon[0]])
	abilities = cur.fetchall()
	ability = 0;
	if (abilities != []):
		a_names = listnames(abilities)
		ability = abilities[menu(a_names)]
	cur.execute(move_qry, [pokemon[0], game[0]])
	moves = cur.fetchall()
	m_names = listnames(moves)
	moves_list = []
	for i in range(4):
		if (m_names == []):
			break
		chosen_mve = menu(m_names)
		moves_list.append(moves[chosen_mve])
		m_names.pop(chosen_mve)
		moves.pop(chosen_mve)
	printpokemon(game, pokemon, pokedex, ability, moves_list)

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
